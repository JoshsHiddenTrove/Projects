import numpy as np
from random import randint

class wordSearch():
    
    def __init__(self):
        self.width = 0
        self.minWidth = 0
        self.height = 0
        self.minHeight = 0
        self.words = []
        self.minChar = 0
        self.requiredWordChar = 0
        
    def setMinDimensions(self):
        hold=0
        for word in self.words:
            if len(word) > hold:
                hold = len(word)
        if(self.width < hold):
            self.width = hold
        if(self.height < hold):
            self.height = hold
        self.minWidth = hold
        self.minHeight = hold
        self.minChar = self.width * self.height
        return hold
    
    def setHeight(self,newHeight):
        if(newHeight < self.minHeight):
            print("Can't make the height lower than the longest word")
            return self.minHeight
        else:
            self.height = newHeight
            self.minChar = self.width * self.height
            return self.height
        
    def setWidth(self,newWidth):
        if(newWidth < self.width):
            print("Can't make the height lower than the longest word")
            return self.width
        else:
            self.width = newWidth
            self.minChar = self.width * self.height
            return self.width
    
    def addWord(self,newWord):
        word = ""
        for word in self.words:
            if word == newWord:
                print("You tried to add the same word twice")
                return False
        #print(self.words)
        self.requiredWordChar += len(newWord)
        self.words.append(newWord)
        return True
    
    def createWordSearch(self):
        if self.minChar < self.requiredWordChar:
            print("not enough characters in the word search please make bigger")
            return False
        search = np.zeros((self.height,self.width), 'U1')
        for x in range(self.height):
            for y in  range(self.width):
                search[x][y] = chr(randint(97,122))
        print(search)
        return True
        
#    def placeWord(self):
        
        
    
